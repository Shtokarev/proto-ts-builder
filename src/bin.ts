#!/usr/bin/env node
import { Command } from "commander";
import builder from "./";

const program = new Command();

program
  .name("proto-ts-builder")
  .description(
    "CLI utility for creating Typescript ESM package with client and service from a bunch of proto files, using ts-proto"
  )
  .version("0.0.1");

program
  .command("generate-types")
  .option(
    "-p, --proto <proto_path>",
    "The source directory with the proto files and subfolders, relative to the current working directory.",
    "."
  )
  .option(
    "-d, --output <destination_path>",
    "The directory for TS generated types, relative to the current working directory.",
    "./generated/types"
  )
  .option(
    "-o,  --ts_proto_opt <ts-proto-options>",
    "Options for ts-proto.",
    "outputEncodeMethods=false,outputJsonMethods=false,outputClientImpl=false,esModuleInterop=true,addGrpcMetadata=true,lowerCaseServiceMethods=true,unrecognizedEnum=true,exportCommonSymbols=true,oneof=unions,importSuffix=.js,env=node,removeEnumPrefix=true"
  )
  .action((options) => {
    const { proto, output, ts_proto_opt } = options;
    console.log("STARTING GENERATE TS TYPE FILES\n");

    builder.generate(proto, output, ts_proto_opt);
    console.log("TYPE FILES GENERATION COMPLETED\n");
  });

program
  .command("generate-services")
  .option(
    "-p, --proto <proto_path>",
    "The source directory with the proto files and subfolders, relative to the current working directory.",
    "."
  )
  .option(
    "-d, --output <destination_path>",
    "The directory for TS generated files, relative to the current working directory.",
    "./generated"
  )
  .option(
    "-o,  --ts_proto_opt <ts-proto-options>",
    "Options for ts-proto.",
    "outputServices=grpc-js,addGrpcMetadata=true,esModuleInterop=true,lowerCaseServiceMethods=true,unrecognizedEnum=true,exportCommonSymbols=true,oneof=unions,importSuffix=.js,env=node,removeEnumPrefix=true"
  )

  .action((options) => {
    const { proto, output, ts_proto_opt } = options;
    console.log("STARTING GENERATE TS SERVICES FILES\n");

    builder.generate(proto, output, ts_proto_opt);
    console.log("SERVICES FILES GENERATION COMPLETED\n");
  });

program
  .command("index")
  .option(
    "-d, --directory <directory>",
    "The source directory with generated TS files, relative to the current working directory.",
    "./generated"
  )
  .option(
    "-h, --header <header>",
    "String to prepend to top of generated file.",
    "// DO NOT EDIT - this file was generated by [proto-ts-builder]\n"
  )
  .option(
    "-s --skip <name>",
    "Skip directory or file for indexing to prevent mixing types and services.",
    "types"
  )
  .action((options) => {
    const { directory, header, skip } = options;
    console.log("STARTING INDEXING TS FILES\n");

    builder.indexTsFolder(directory, header, skip);
    console.log("INDEXING COMPLETED\n");
  });

program.parse();
